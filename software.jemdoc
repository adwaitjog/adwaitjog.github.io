# jemdoc: addcss{bootstrap/css/bootstrap.css}

~~~
{}{raw}
    <div class="navbar navbar-inverse" role="navigation">
      <div class="container">
          <ul class="nav navbar-nav">
            <li class="active"><a href="https://adwaitjog.github.io/index.html">Home</a></li>
            <li class="active"><a href="https://adwaitjog.github.io/pubs.html">Publications</a></li>
            <li class="active"><a href="https://adwaitjog.github.io/talks.html">Talks</a></li>
            <li class="active"><a href="https://adwaitjog.github.io/software.html">Artifacts</a></li>
            <li class="active"><a href="https://adwaitjog.github.io/teaching.html">Teaching</a></li>
            <li class="active"><a href="https://adwaitjog.github.io/service.html">Service</a></li>
            <li class="active"><a href="https://adwaitjog.github.io/misc.html">Misc.</a></li>
            <li class="active"><a href="https://insight-cal.github.io/">Research Group</a></li>
          </ul>
      </div>
    </div>
~~~

{{<a name="Software"></a>}} 
== Artifacts
*\<span style=\"color: blue\"\>A Fast NFA Engine for GPUs\<\/span\>* 
[https://github.com/bigwater/gpunfa-artifact (github)] \n
Non-deterministic Finite Automata (NFA) are space-efficient
finite state machines that have significant applications in
domains such as pattern matching and data analytics. We have
developed a fast NFA engine for GPUs, which performs much better 
than the state-of-the-art and even outperforms Automata Processor 
(a domain-specific accelerator for NFAs) in several cases. \n

Please cite the following paper if you use or build upon this framework: \n
*\<span style=\"color: forestgreen\"\>(ASPLOS 2020)\<\/span\>* 
\[[docs/pdf/nfagpu-asplos20.pdf PDF]] 
\[[https://github.com/bigwater/gpunfa-artifact Artifact]] \n
Hongyuan Liu, Sreepathi Pai, *Adwait Jog* \n
[docs/pdf/nfagpu-asplos20.pdf /Why GPUs are Slow at Executing NFAs and How to Make them Faster/], \n
In the Proceedings of 25th ACM International Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS), Lausanne, Switzerland, March, 2020  \n 
(Acceptance rate: 86/479 â‰ˆ 18%) \n

\n
\n

*\<span style=\"color: blue\"\>MAFIA: Multiple Application Framework for GPU Architectures\<\/span\>* 
[https://github.com/adwaitjog/mafia (github)] \n
MAFIA is developed for supporting multiple applications execution on GPUs. Currently, 
it supports 25 benchmarks from various benchmark suites (e.g., CUDA, Parboil, SHOC and Rodinia). 
From these benchmarks, one can construct 300 2-application workloads and 2300 3-application 
workloads. \n

Please cite the following paper if you use or build upon this framework: \n
*\<span style=\"color: forestgreen\"\>(MEMSYS 2015)\<\/span\>* 
\[[docs/pdf/Anatomy-Memsys-2015.pdf PDF]] 
\[[docs/pptx/Anatomy-Memsys-2015.pptx Talk (PPTX)]]
\[[https://github.com/adwaitjog/mafia Github]] \n 
*Adwait Jog*, Onur Kayiran, Tuba Kesten, Ashutosh Pattnaik, Evgeny Bolotin, Niladrish Chatterjee, 
Stephen W. Keckler, Mahmut T. Kandemir, Chita R. Das, \n
[docs/pdf/Anatomy-Memsys-2015.pdf /Anatomy of GPU Memory System for Multi-Application Execution/], \n
In the Proceedings of 1st International Symposium on Memory Systems (MEMSYS), Washington, DC, Oct 2015 \n

